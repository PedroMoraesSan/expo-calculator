# LEARNING EXPO CALCULATOR: A BEGINNER'S GUIDE

Hello there! In this guide, I'll walk you through the Expo Calculator project we've built together. I'll explain everything in simple terms, assuming you're new to programming. Let's dive in!

## WHAT IS THIS PROJECT?

We've created a calculator app using Expo, which is a framework that helps us build mobile apps using JavaScript/TypeScript. Our calculator can:
- Perform basic math operations (addition, subtraction, multiplication, division)
- Handle decimal numbers
- Calculate percentages
- Toggle between positive and negative numbers
- Clear the display

## PROJECT STRUCTURE

Let's understand how our project is organized:

```
expo-calculator/
├── app/                  # Main application code
│   ├── (tabs)/           # Tab-based navigation
│   │   ├── index.tsx     # Our calculator screen
│   │   └── _layout.tsx   # Tab layout configuration
│   └── _layout.tsx       # Root layout for the app
├── assets/               # Images, fonts, etc.
├── components/           # Reusable UI components
│   ├── ThemedText.tsx    # Text with theme support
│   └── ThemedView.tsx    # View with theme support
├── constants/            # App constants
│   └── Colors.ts         # Color definitions
├── hooks/                # Custom React hooks
│   ├── useColorScheme.ts # Hook for device theme
│   └── useThemeColor.ts  # Hook for themed colors
├── node_modules/         # External libraries (created by npm)
├── package.json          # Project configuration
└── tsconfig.json         # TypeScript configuration
```

## DEPENDENCIES (THE BUILDING BLOCKS)

Think of dependencies as pre-made Lego blocks that we use to build our app faster. Here are the main ones:

1. **Expo** (version 53): A framework that simplifies mobile app development. It's like a toolkit with everything we need to build and test mobile apps.

2. **React** (version 19.0.0): A JavaScript library for building user interfaces. It's the foundation of our app, helping us create interactive elements.

3. **React Native** (version 0.79.1): Extends React to work on mobile devices. It translates our JavaScript code into native mobile components.

4. **TypeScript** (version 5.8.3): A programming language that adds types to JavaScript. It helps catch errors before our app runs.

5. **Expo Router**: Helps us navigate between different screens in our app.

## KEY CONCEPTS EXPLAINED

### 1. Components

Components are like building blocks for our app. They're reusable pieces of code that define a part of our user interface.

For example, we created a `CalculatorButton` component:
```typescript
const CalculatorButton: React.FC<CalculatorButtonProps> = ({ 
  text, 
  onPress, 
  type, 
  disabled = false,
  span = false
}: CalculatorButtonProps) => {
  // Component code here
}
```

This component represents a button on our calculator. We can reuse it for all buttons (numbers, operations, etc.) by passing different properties.

### 2. State Management

State is like the memory of our app. It keeps track of information that can change over time.

In our calculator, we use state to track:
```typescript
const [display, setDisplay] = useState('0');                  // What's shown on the calculator screen
const [firstOperand, setFirstOperand] = useState<number | null | 'Error'>(null);  // First number in calculation
const [operation, setOperation] = useState<string | null>(null);  // Current operation (+, -, etc.)
const [waitingForSecondOperand, setWaitingForSecondOperand] = useState(false);  // Are we waiting for the second number?
```

When you press buttons, we update these states, which then updates what you see on screen.

### 3. Event Handlers

Event handlers are functions that respond to user actions (like pressing a button).

For example, when you press a number button:
```typescript
const inputDigit = (digit: string) => {
  if (waitingForSecondOperand) {
    setDisplay(digit);
    setWaitingForSecondOperand(false);
  } else {
    setDisplay(display === '0' ? digit : display + digit);
  }
};
```

This function updates the display with the number you pressed.

### 4. Styling

We use styles to make our app look good. In React Native, styles are similar to CSS but written in JavaScript.

```typescript
const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  calculator: {
    flex: 1,
    padding: 16,
    justifyContent: 'flex-end',
  },
  // More styles...
});
```

### 5. Theming

Our app supports both light and dark modes. We use hooks like `useColorScheme` to detect the user's preference and adjust colors accordingly.

## HOW THE CALCULATOR WORKS

1. **Display**: The top section shows the current number or result.

2. **Number Buttons (0-9)**: When pressed, they add digits to the display.

3. **Operation Buttons (+, -, ×, ÷)**: When pressed, they:
   - Save the current number as the first operand
   - Save the operation
   - Prepare to receive the second number

4. **Equals Button (=)**: Performs the calculation and shows the result.

5. **Clear Button (C)**: Resets everything.

6. **Special Buttons**:
   - **±**: Changes the sign of the current number
   - **%**: Converts the current number to a percentage
   - **.**: Adds a decimal point

## THE CALCULATION PROCESS

Let's walk through how a calculation works:

1. You press a number button (e.g., "5")
   - The `inputDigit` function adds "5" to the display

2. You press an operation button (e.g., "+")
   - The `performOperation` function saves "5" as the first operand and "+" as the operation
   - It sets `waitingForSecondOperand` to true

3. You press another number button (e.g., "3")
   - Since `waitingForSecondOperand` is true, the display changes to "3"

4. You press the equals button
   - The `performOperation` function calculates 5 + 3
   - It updates the display to show "8"

## RUNNING THE APP

To run the app:

1. Make sure you have Node.js and npm installed
2. Install Expo CLI: `npm install -g expo-cli`
3. Navigate to the project directory
4. Run `npx expo start`
5. Use the Expo Go app on your phone to scan the QR code, or press 'w' to open in a web browser

## CONCLUSION

Congratulations! You now understand how our Expo Calculator app works. This project demonstrates fundamental concepts of React Native development, including components, state management, styling, and event handling.

Feel free to experiment with the code. Try adding new features or changing the design to make it your own!

Happy coding!
